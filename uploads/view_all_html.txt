<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>File Explorer</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    .container {
      display: flex;
    }

    .navbar {
      width: 200px;
      height: 100vh;
      background-color: #333;
      color: white;
      overflow-y: auto;
    }

    .sub-navbar {
      display: none;
      padding-left: 15px;
    }

    .sub-navbar div {
      cursor: pointer;
      margin-bottom: 5px;
    }

    .folder {
      font-weight: bold;
    }

    .content {
      flex-grow: 1;
      position: relative;
    }

    iframe {
      width: 100%;
      height: 100%;
      border: none;
    }

    .preview-message {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 18px;
      color: #555;
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="navbar" class="navbar"></div>
    <div id="content" class="content">
      <iframe id="fileViewer" src="" frameborder="0"></iframe>
      <div class="preview-message">Select a file to preview</div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const navbar = document.getElementById('navbar');
      const contentContainer = document.getElementById('content');
      const fileViewer = document.getElementById('fileViewer');
      const previewMessage = document.querySelector('.preview-message');

      function createFileElement(file) {
        const fileElement = document.createElement('div');
        fileElement.textContent = file.name;
        fileElement.classList.add('file');
        if (file.isFolder) {
          fileElement.classList.add('folder');
          fileElement.addEventListener('click', () => {
            fetch(`/files/${file.path}`)
              .then(response => response.json())
              .then(subfolderContent => {
                renderSubfolder(subfolderContent);
              })
              .catch(error => {
                console.error('Error fetching subfolder content:', error);
              });
          });
        } else {
          fileElement.addEventListener('click', () => {
            // Set the iframe source to display file content
            fileViewer.src = `/file/${file.path}`;
            previewMessage.style.display = 'none';
          });
        }

        return fileElement;
      }

      function renderSubfolder(subfolderContent) {
        const subNavbar = document.createElement('div');
        subNavbar.classList.add('sub-navbar');
        subfolderContent.forEach(subfile => {
          const subfileElement = createFileElement(subfile);
          subNavbar.appendChild(subfileElement);
        });

        // Clear existing content and display new content
        navbar.innerHTML = '';
        navbar.appendChild(subNavbar);
        subNavbar.style.display = 'block';

        // Reset iframe and display preview message
        fileViewer.src = '';
        previewMessage.style.display = 'block';
      }

      // Fetch file names from the root folder
      fetch('/files')
        .then(response => response.json())
        .then(data => {
          data.forEach(file => {
            const fileElement = createFileElement(file);
            navbar.appendChild(fileElement);
          });
        })
        .catch(error => {
          console.error('Error fetching root folder content:', error);
        });
    });
  </script>
</body>
</html>
